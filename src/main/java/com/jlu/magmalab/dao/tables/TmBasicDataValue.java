/*
 * This file is generated by jOOQ.
*/
package com.jlu.magmalab.dao.tables;


import com.jlu.magmalab.dao.Indexes;
import com.jlu.magmalab.dao.Keys;
import com.jlu.magmalab.dao.Magmlab;
import com.jlu.magmalab.dao.tables.records.TmBasicDataValueRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TmBasicDataValue extends TableImpl<TmBasicDataValueRecord> {

    private static final long serialVersionUID = -769833323;

    /**
     * The reference instance of <code>magmLab.TM_BASIC_DATA_VALUE</code>
     */
    public static final TmBasicDataValue TM_BASIC_DATA_VALUE = new TmBasicDataValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TmBasicDataValueRecord> getRecordType() {
        return TmBasicDataValueRecord.class;
    }

    /**
     * The column <code>magmLab.TM_BASIC_DATA_VALUE.DATA_ID</code>.
     */
    public final TableField<TmBasicDataValueRecord, String> DATA_ID = createField("DATA_ID", org.jooq.impl.SQLDataType.CHAR(48).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>magmLab.TM_BASIC_DATA_VALUE.ELE_INDEX</code>.
     */
    public final TableField<TmBasicDataValueRecord, Integer> ELE_INDEX = createField("ELE_INDEX", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>magmLab.TM_BASIC_DATA_VALUE.DATA_VALUE</code>.
     */
    public final TableField<TmBasicDataValueRecord, Double> DATA_VALUE = createField("DATA_VALUE", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>magmLab.TM_BASIC_DATA_VALUE</code> table reference
     */
    public TmBasicDataValue() {
        this(DSL.name("TM_BASIC_DATA_VALUE"), null);
    }

    /**
     * Create an aliased <code>magmLab.TM_BASIC_DATA_VALUE</code> table reference
     */
    public TmBasicDataValue(String alias) {
        this(DSL.name(alias), TM_BASIC_DATA_VALUE);
    }

    /**
     * Create an aliased <code>magmLab.TM_BASIC_DATA_VALUE</code> table reference
     */
    public TmBasicDataValue(Name alias) {
        this(alias, TM_BASIC_DATA_VALUE);
    }

    private TmBasicDataValue(Name alias, Table<TmBasicDataValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private TmBasicDataValue(Name alias, Table<TmBasicDataValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Magmlab.MAGMLAB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TM_BASIC_DATA_VALUE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TmBasicDataValueRecord> getPrimaryKey() {
        return Keys.KEY_TM_BASIC_DATA_VALUE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TmBasicDataValueRecord>> getKeys() {
        return Arrays.<UniqueKey<TmBasicDataValueRecord>>asList(Keys.KEY_TM_BASIC_DATA_VALUE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TmBasicDataValue as(String alias) {
        return new TmBasicDataValue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TmBasicDataValue as(Name alias) {
        return new TmBasicDataValue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TmBasicDataValue rename(String name) {
        return new TmBasicDataValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TmBasicDataValue rename(Name name) {
        return new TmBasicDataValue(name, null);
    }
}
