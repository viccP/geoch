/*
 * This file is generated by jOOQ.
*/
package com.jlu.magmalab.dao.tables.daos;


import com.jlu.magmalab.dao.tables.TmStdValue;
import com.jlu.magmalab.dao.tables.records.TmStdValueRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TmStdValueDao extends DAOImpl<TmStdValueRecord, com.jlu.magmalab.dao.tables.pojos.TmStdValue, Record2<Integer, String>> {

    /**
     * Create a new TmStdValueDao without any configuration
     */
    public TmStdValueDao() {
        super(TmStdValue.TM_STD_VALUE, com.jlu.magmalab.dao.tables.pojos.TmStdValue.class);
    }

    /**
     * Create a new TmStdValueDao with an attached configuration
     */
    public TmStdValueDao(Configuration configuration) {
        super(TmStdValue.TM_STD_VALUE, com.jlu.magmalab.dao.tables.pojos.TmStdValue.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Record2<Integer, String> getId(com.jlu.magmalab.dao.tables.pojos.TmStdValue object) {
        return compositeKeyRecord(object.getEleIndex(), object.getStdId());
    }

    /**
     * Fetch records that have <code>STD_ID IN (values)</code>
     */
    public List<com.jlu.magmalab.dao.tables.pojos.TmStdValue> fetchByStdId(String... values) {
        return fetch(TmStdValue.TM_STD_VALUE.STD_ID, values);
    }

    /**
     * Fetch records that have <code>ELE_INDEX IN (values)</code>
     */
    public List<com.jlu.magmalab.dao.tables.pojos.TmStdValue> fetchByEleIndex(Integer... values) {
        return fetch(TmStdValue.TM_STD_VALUE.ELE_INDEX, values);
    }

    /**
     * Fetch records that have <code>STD_VALUE IN (values)</code>
     */
    public List<com.jlu.magmalab.dao.tables.pojos.TmStdValue> fetchByStdValue(Double... values) {
        return fetch(TmStdValue.TM_STD_VALUE.STD_VALUE, values);
    }
}
