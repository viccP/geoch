/*
 * This file is generated by jOOQ.
*/
package com.jlu.magmalab.dao.tables;


import com.jlu.magmalab.dao.Indexes;
import com.jlu.magmalab.dao.Keys;
import com.jlu.magmalab.dao.Magmlab;
import com.jlu.magmalab.dao.tables.records.TmBasicDataTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TmBasicDataType extends TableImpl<TmBasicDataTypeRecord> {

    private static final long serialVersionUID = -2042543542;

    /**
     * The reference instance of <code>magmLab.TM_BASIC_DATA_TYPE</code>
     */
    public static final TmBasicDataType TM_BASIC_DATA_TYPE = new TmBasicDataType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TmBasicDataTypeRecord> getRecordType() {
        return TmBasicDataTypeRecord.class;
    }

    /**
     * The column <code>magmLab.TM_BASIC_DATA_TYPE.DATA_ID</code>.
     */
    public final TableField<TmBasicDataTypeRecord, String> DATA_ID = createField("DATA_ID", org.jooq.impl.SQLDataType.CHAR(48).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>magmLab.TM_BASIC_DATA_TYPE.DATA_NAME</code>.
     */
    public final TableField<TmBasicDataTypeRecord, String> DATA_NAME = createField("DATA_NAME", org.jooq.impl.SQLDataType.CHAR(100), this, "");

    /**
     * The column <code>magmLab.TM_BASIC_DATA_TYPE.DATA_TYPE</code>. 0:初始岩浆 1:初始岩体 2:标准化值 3:混染物
     */
    public final TableField<TmBasicDataTypeRecord, Integer> DATA_TYPE = createField("DATA_TYPE", org.jooq.impl.SQLDataType.INTEGER, this, "0:初始岩浆 1:初始岩体 2:标准化值 3:混染物");

    /**
     * The column <code>magmLab.TM_BASIC_DATA_TYPE.MEMO</code>.
     */
    public final TableField<TmBasicDataTypeRecord, String> MEMO = createField("MEMO", org.jooq.impl.SQLDataType.CHAR(50), this, "");

    /**
     * Create a <code>magmLab.TM_BASIC_DATA_TYPE</code> table reference
     */
    public TmBasicDataType() {
        this(DSL.name("TM_BASIC_DATA_TYPE"), null);
    }

    /**
     * Create an aliased <code>magmLab.TM_BASIC_DATA_TYPE</code> table reference
     */
    public TmBasicDataType(String alias) {
        this(DSL.name(alias), TM_BASIC_DATA_TYPE);
    }

    /**
     * Create an aliased <code>magmLab.TM_BASIC_DATA_TYPE</code> table reference
     */
    public TmBasicDataType(Name alias) {
        this(alias, TM_BASIC_DATA_TYPE);
    }

    private TmBasicDataType(Name alias, Table<TmBasicDataTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TmBasicDataType(Name alias, Table<TmBasicDataTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Magmlab.MAGMLAB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TM_BASIC_DATA_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TmBasicDataTypeRecord> getPrimaryKey() {
        return Keys.KEY_TM_BASIC_DATA_TYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TmBasicDataTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<TmBasicDataTypeRecord>>asList(Keys.KEY_TM_BASIC_DATA_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TmBasicDataType as(String alias) {
        return new TmBasicDataType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TmBasicDataType as(Name alias) {
        return new TmBasicDataType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TmBasicDataType rename(String name) {
        return new TmBasicDataType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TmBasicDataType rename(Name name) {
        return new TmBasicDataType(name, null);
    }
}
