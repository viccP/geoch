/*
 * This file is generated by jOOQ.
*/
package com.jlu.magmalab.dao.tables;


import com.jlu.magmalab.dao.Indexes;
import com.jlu.magmalab.dao.Keys;
import com.jlu.magmalab.dao.Magmlab;
import com.jlu.magmalab.dao.tables.records.TmStdTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TmStdType extends TableImpl<TmStdTypeRecord> {

    private static final long serialVersionUID = -254390060;

    /**
     * The reference instance of <code>magmLab.TM_STD_TYPE</code>
     */
    public static final TmStdType TM_STD_TYPE = new TmStdType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TmStdTypeRecord> getRecordType() {
        return TmStdTypeRecord.class;
    }

    /**
     * The column <code>magmLab.TM_STD_TYPE.STD_ID</code>.
     */
    public final TableField<TmStdTypeRecord, String> STD_ID = createField("STD_ID", org.jooq.impl.SQLDataType.CHAR(48).nullable(false), this, "");

    /**
     * The column <code>magmLab.TM_STD_TYPE.STD_NAME</code>.
     */
    public final TableField<TmStdTypeRecord, String> STD_NAME = createField("STD_NAME", org.jooq.impl.SQLDataType.CHAR(100), this, "");

    /**
     * The column <code>magmLab.TM_STD_TYPE.STD_MEMO</code>.
     */
    public final TableField<TmStdTypeRecord, String> STD_MEMO = createField("STD_MEMO", org.jooq.impl.SQLDataType.CHAR(200), this, "");

    /**
     * Create a <code>magmLab.TM_STD_TYPE</code> table reference
     */
    public TmStdType() {
        this(DSL.name("TM_STD_TYPE"), null);
    }

    /**
     * Create an aliased <code>magmLab.TM_STD_TYPE</code> table reference
     */
    public TmStdType(String alias) {
        this(DSL.name(alias), TM_STD_TYPE);
    }

    /**
     * Create an aliased <code>magmLab.TM_STD_TYPE</code> table reference
     */
    public TmStdType(Name alias) {
        this(alias, TM_STD_TYPE);
    }

    private TmStdType(Name alias, Table<TmStdTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TmStdType(Name alias, Table<TmStdTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Magmlab.MAGMLAB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TM_STD_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TmStdTypeRecord> getPrimaryKey() {
        return Keys.KEY_TM_STD_TYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TmStdTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<TmStdTypeRecord>>asList(Keys.KEY_TM_STD_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TmStdType as(String alias) {
        return new TmStdType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TmStdType as(Name alias) {
        return new TmStdType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TmStdType rename(String name) {
        return new TmStdType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TmStdType rename(Name name) {
        return new TmStdType(name, null);
    }
}
